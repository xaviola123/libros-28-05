RECURSO: libro

Vamos a exponer un CRUD de libro

GET-> recuperar libros
POST->insertar libros
PUT->actualizar libros
DELETE->eliminar libros

http://localhost:8080/libros 								GET expone todos los libros
http://localhost:8080/libros/{isbn} 					GET recupera libro con isbn indicado en la url
http://localhost:8080/libros									POST dar de alta libro del que paso los datos en el cuerpo (por JSON)
http://localhost:8080/libros 								PUT  actualizar un libro del que paso los datos en el cuerpo
http://localhost:8080/libros/{isbn}					DELETE borrar un libro con isbn tal 



ORDEN DE CREACION

1-Crear el proyecto y poner dependecias necesarias

2-Definir el modelo de datos dentro de un paquete en src/main/java new paquete com.curso.model (dentro clases Java, ej. libro)

3- Crear paquete com.curso.dao, dentro la interface (LibrosDao, ej) y esta extends JpaRepository<T,ID>

			donde T -> Tipo de entidad ej Libro
			donde ID -> Tipo de dato de la clave primaria (la que marcamos en la clase Libro con @Id) pero el tipo deber ser de los Wrapper (Integer, no int)
		3.1 Crear dentro de la interface los metodos personalizados si queremos, para hacer querys mas especificas, porque sino la Jpa Repository ya ofrece unos metodos
				CRUD basicos

4-Definir la capa de logica de negocio osea, la capa de servicio (com.curso.service). Aqui vamos acrear una interfaz LibrosService

	4.1- Crear la interfaz con sus metodos vacios
	4.2-Crear clase LibrosServiceImpl que implemente la interfaz con su definicion de metodos (acordarse de colocar @Service en esta clase). Luego hay que indicar que queremos que nos inyecte una instancia rencia que definimos en la propia clase @Service, 
			y cuando necesitemos llamarlo usaremos la anotacion @Autowired
	4.3 Ahora definimos los metodos que teniamos de la interface pero usando la instancia de Dao creada antes y llamando con dao.findAll , dao.save, dao.delete etc dentro del metodo que sea.
	
5-Implementar el controllador (com.curso.cotroller) (No olvidar que va a ser controlardor REST, marcarlo con @RestController y ademas traer la clase LibrosService con  @Autowired

	5.1 Crear los metodos otra vez partiendo de los que estan en la clase Service (Hay que crear una instancia de LibrosServiceImp en esta clase y a partir de esta llamar a los metodos de LibrosServiceImpl que definimos antes
	
	5.2 Añadirle las anotaciones ahora a cada metodos en fundion de lo que queremos mostrar
	
5-Configuraciones: 

6- En la clase lanzadora añadir los paquetes que tienes las clases con anotaciones de spring
			@EntityScan(basePackages = "com.curso.model")
			@EnableJpaRepositories(basePackages = "com.curso.dao")
			@SpringBootApplication(scanBasePackages = { "com.curso.controller", "com.curso.service" })
			
7- Application properties  (src/main/resources)), indicarle las propiedades de conexiona la base de datos
 			
		spring.application.name=03-librosCRUD-BD
		spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
		spring.datasource.url=jdbc:mysql://localhost:3306/jueves23
		spring.datasource.username=root
		spring.datasource.password=root

		spring.jpa.hibernate.ddl-auto=update
		spring.jpa.show-sql=true
		
		
